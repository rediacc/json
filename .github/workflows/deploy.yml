name: Test and Deploy Template Catalog

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope'
        required: true
        type: choice
        default: 'all'
        options:
          - all
          - specific
          - skip
      template_path:
        description: 'Template path (e.g., databases/postgresql) - only used when test_scope is "specific"'
        required: false
        type: string

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      templates: ${{ steps.filter.outputs.templates || steps.manual.outputs.templates }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Handle manual workflow dispatch and schedule
        id: manual
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "templates=true" >> $GITHUB_OUTPUT
            echo "üïê Scheduled run - all templates will be tested"
          elif [ "${{ inputs.test_scope }}" == "skip" ]; then
            echo "templates=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Manual trigger - skipping tests"
          else
            echo "templates=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Manual trigger - tests will run"
          fi

      - name: Check for template changes
        if: github.event_name != 'workflow_dispatch' && github.event_name != 'schedule'
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            templates:
              - 'templates/**'

      - name: Show change detection result
        if: github.event_name != 'workflow_dispatch' && github.event_name != 'schedule'
        run: |
          if [ "${{ steps.filter.outputs.templates }}" == "true" ]; then
            echo "‚úÖ Template changes detected - tests will run"
          else
            echo "‚è≠Ô∏è No template changes detected - tests will be skipped"
          fi

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: changes
    if: needs.changes.outputs.templates == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed templates
        id: detect
        run: |
          # Handle scheduled runs - test all templates
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "üïê Scheduled run - testing ALL templates"
            echo "templates=" >> $GITHUB_OUTPUT
            echo "count=all" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Handle manual workflow dispatch
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            if [ "${{ inputs.test_scope }}" == "all" ]; then
              echo "üîß Manual trigger - testing ALL templates"
              echo "templates=" >> $GITHUB_OUTPUT
              echo "count=all" >> $GITHUB_OUTPUT
              exit 0
            elif [ "${{ inputs.test_scope }}" == "specific" ]; then
              TEMPLATE_PATH="${{ inputs.template_path }}"
              if [ -z "$TEMPLATE_PATH" ]; then
                echo "‚ùå Error: template_path is required when test_scope is 'specific'"
                exit 1
              fi
              echo "üîß Manual trigger - testing specific template: $TEMPLATE_PATH"
              echo "templates=$TEMPLATE_PATH" >> $GITHUB_OUTPUT
              echo "count=1" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi

          # Auto-detect changed templates for PR/push
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          else
            BASE_SHA="${{ github.event.before }}"
            HEAD_SHA="${{ github.sha }}"
          fi

          # Get changed files
          CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA -- templates/ || echo "")

          if [ -z "$CHANGED_FILES" ]; then
            echo "No template files changed"
            echo "templates=" >> $GITHUB_OUTPUT
            echo "count=0" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Extract unique template directories (format: category/template)
          TEMPLATES=$(echo "$CHANGED_FILES" | \
            grep -E '^templates/[^/]+/[^/]+/' | \
            sed 's|^templates/\([^/]*/[^/]*\)/.*|\1|' | \
            sort -u)

          if [ -z "$TEMPLATES" ]; then
            echo "No specific templates changed"
            echo "templates=" >> $GITHUB_OUTPUT
            echo "count=0" >> $GITHUB_OUTPUT
          else
            TEMPLATE_COUNT=$(echo "$TEMPLATES" | wc -l)
            echo "Changed templates:"
            echo "$TEMPLATES"
            echo "templates<<EOF" >> $GITHUB_OUTPUT
            echo "$TEMPLATES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "count=$TEMPLATE_COUNT" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        if: steps.detect.outputs.count != '0'
        uses: docker/setup-buildx-action@v3

      - name: Check disk space before tests
        if: steps.detect.outputs.count != '0'
        run: |
          echo "Disk space before tests:"
          df -h

      - name: Run template tests
        id: test
        if: steps.detect.outputs.count != '0'
        run: |
          chmod +x ./test-templates.sh

          # Read skip list from .templates-skiplist
          SKIP_ARGS=""
          if [ -f .templates-skiplist ]; then
            echo "üìã Reading skip list from .templates-skiplist"
            while IFS= read -r line; do
              # Skip comments and empty lines
              if [[ ! "$line" =~ ^#.*$ ]] && [[ -n "$line" ]]; then
                SKIP_ARGS="$SKIP_ARGS --skip $line"
                echo "  ‚è≠Ô∏è  Skipping: $line"
              fi
            done < .templates-skiplist
          fi

          # Check if testing all templates
          if [ "${{ steps.detect.outputs.count }}" == "all" ]; then
            echo "üîß Testing ALL templates (with skip list)"
            ./test-templates.sh --verbose $SKIP_ARGS
          else
            # Build test command with specific templates
            TEST_CMD="./test-templates.sh --verbose $SKIP_ARGS"

            while IFS= read -r template; do
              if [ -n "$template" ]; then
                TEST_CMD="$TEST_CMD --template $template"
              fi
            done <<< "${{ steps.detect.outputs.templates }}"

            echo "Running: $TEST_CMD"
            eval $TEST_CMD
          fi

      - name: Check disk space after tests
        if: always() && steps.detect.outputs.count != '0'
        run: |
          echo "Disk space after tests:"
          df -h

      - name: Upload test results
        if: always() && steps.detect.outputs.count != '0'
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.json
          retention-days: 30

      - name: Display test summary
        if: always() && steps.detect.outputs.count != '0'
        run: |
          if [ -f test-results.json ]; then
            echo "## Template Test Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Extract summary using jq
            total=$(jq -r '.summary.total' test-results.json)
            passed=$(jq -r '.summary.passed' test-results.json)
            failed=$(jq -r '.summary.failed' test-results.json)
            skipped=$(jq -r '.summary.skipped' test-results.json)
            duration=$(jq -r '.summary.duration' test-results.json)

            echo "- **Total Tests:** $total" >> $GITHUB_STEP_SUMMARY
            echo "- **Passed:** ‚úÖ $passed" >> $GITHUB_STEP_SUMMARY
            echo "- **Failed:** ‚ùå $failed" >> $GITHUB_STEP_SUMMARY
            echo "- **Skipped:** ‚è≠Ô∏è $skipped" >> $GITHUB_STEP_SUMMARY
            echo "- **Duration:** ‚è±Ô∏è $duration" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Show failed tests if any
            if [ "$failed" -gt 0 ]; then
              echo "### Failed Templates" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              jq -r '.results[] | select(.overall=="failed") | "- `" + .name + "` - " + (.error // "Unknown error")' test-results.json >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ö†Ô∏è Test results file not found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request' && always() && steps.detect.outputs.count != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            if (!fs.existsSync('test-results.json')) {
              console.log('No test results found');
              return;
            }

            const results = JSON.parse(fs.readFileSync('test-results.json', 'utf8'));
            const { total, passed, failed, skipped, duration } = results.summary;

            let body = '## üß™ Template Test Results\n\n';
            body += `| Metric | Value |\n`;
            body += `|--------|-------|\n`;
            body += `| Total Tests | ${total} |\n`;
            body += `| ‚úÖ Passed | ${passed} |\n`;
            body += `| ‚ùå Failed | ${failed} |\n`;
            body += `| ‚è≠Ô∏è Skipped | ${skipped} |\n`;
            body += `| ‚è±Ô∏è Duration | ${duration} |\n\n`;

            if (failed > 0) {
              body += '### Failed Templates\n\n';
              const failedTests = results.results.filter(r => r.overall === 'failed');
              failedTests.forEach(test => {
                body += `- \`${test.name}\`: ${test.error || 'Unknown error'}\n`;
              });
              body += '\n';
            }

            body += '<details>\n<summary>View detailed results</summary>\n\n';
            body += '```json\n' + JSON.stringify(results, null, 2) + '\n```\n';
            body += '</details>\n';

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Template Test Results')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Fail if tests failed
        if: always() && steps.detect.outputs.count != '0'
        run: |
          if [ -f test-results.json ]; then
            failed=$(jq -r '.summary.failed' test-results.json)
            if [ "$failed" -gt 0 ]; then
              echo "‚ùå $failed template(s) failed"
              exit 1
            fi
          fi

  build:
    runs-on: ubuntu-latest
    needs: [changes, test]
    # Only build when tests actually RAN and PASSED (not skipped)
    # This ensures we never deploy without test results
    if: |
      always() &&
      (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') &&
      needs.test.result == 'success'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: .
        continue-on-error: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Generate catalog
        run: |
          chmod +x ./generate.sh
          ./generate.sh

      - name: Copy test results to build directory
        run: |
          if [ -f test-results.json ]; then
            echo "Copying test results to build directory"
            cp test-results.json build/
          else
            echo "No test results found, creating empty results file"
            echo '{"summary":{"total":0,"passed":0,"failed":0,"skipped":0,"duration":"0s","timestamp":""},"results":[]}' > build/test-results.json
          fi
        continue-on-error: true

      - name: Copy CNAME to build directory
        run: |
          cp CNAME build/

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          enablement: true

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./build

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: |
      always() &&
      needs.build.result == 'success' &&
      (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4